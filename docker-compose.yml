version: '3.8'

services:
  # PostgreSQL 데이터베이스
  postgres:
    image: postgres:15-alpine
    container_name: collab-postgres
    environment:
      POSTGRES_DB: collaboration_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - collab-network
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis (캐시 및 세션)
  redis:
    image: redis:7-alpine
    container_name: collab-redis
    ports:
      - '6379:6379'
    networks:
      - collab-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5

  # 백엔드 (개발 모드)
  backend:
    build:
      context: ./
      dockerfile: Dockerfile.dev
    container_name: collab-backend
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USERNAME=postgres
      - DB_PASSWORD=postgres
      - DB_DATABASE=collaboration_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - JWT_EXPIRES_IN=24h
      - CORS_ORIGIN=http://localhost:3000
      - LOG_LEVEL=debug
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - collab-network
    command: npm run start:dev
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  collab-network:
    driver: bridge
